EXERCÍCIO 1 -> 

EX 1.1 -> 

- O dataset dado não possui o _id necessário para a base de dados ser suportada no mongodb,logo alterei o Id que tinha no dataset e coloquei o _id (feito pela script add_id.py)
- Importado para o mongodb com o comando : mongoimport -d plantas -c plantas --file db.json --jsonArray
- Importação ocorreu com sucesso pois : 
2023-05-30T14:08:47.535+0100    connected to: mongodb://localhost/
2023-05-30T14:08:48.739+0100    29617 document(s) imported successfully. 0 document(s) failed to import.




EX 1.2 -> 
Nesta questão antes de testar cada querie temos de fazer os seguintes comandos:
1º mongosh
2º show dbs 
3º use plantas


1.Quantos registos estão na base de dados;
R: db.plantas.countDocuments()

2. Quantos registos de plantação se encontram na freguesia "São Domingos de Rana"?
R:db.plantas.find({"Freguesia":"São Domingos de Rana"}).count()

3. Qual a lista de freguesias (ordenada alfabeticamente e sem repetições)?
R:db.plantas.distinct("Freguesia")

4.Qual a distribuição dos registos por freguesia (quantos registos em cada freguesia)
R:db.plantas.aggregate([
  {
    $group: {
      _id: "$Freguesia",
      count: { $sum: 1 }
    }
  }
])
Agrupamos os registos de iguais freguesias e somamos a quantidade de registos

5.Qual a distribuição dos registos por espécie?
R:db.plantas.aggregate([
  {
    $group: {
      _id: "$Espécie",
      count: { $sum: 1 }
    }
  }
])

Esta querie é idêntica há de cima apenas altera o que queremos "distribuir".


EX 1.3 -> 

Na API de dados temos de fazer os seguintes comandos:
- Na criação da API temos de utilizar os seguintes comandos:
npx express-generator --view=pug ou npx express-generator
npm i 
npm i mongoose --save 
- Executar a API temos de utilizar o comando:
npm start

Construir a API de dados da seguinte forma:
1º Eliminar a pasta view criada na inicialização do projeto
2º Alterar a porta de entrada, para a porta pedida no enunciado(Ficheiro www da pasta bin)
3º Alterar a app.js para fazer a conexão com o mongodb 
4º Criar as pastas models e controllers ( Controllers contêm os controlos da bd e na pasta models contêm os Schemas da bd)
5º Criação do model: Possui os modelos dos objetos existentes na bd.
6º Criação do controller: Possui os controllers necessários para alterar os registos existentes na base de dados (Operações de CRUD)
7º Criação de routes criada por nós para acerdermos aos registos na bd, tal como aparece no enunciado
8º Teste das rotas criadas utilizando o browser e o Postman 




EXERCÍCIO 2 -> 

Na Interface temos de utilizar os seguintes comandos:
- Na criação da Interface temos de utilizar os seguintes comandos:
npx express-generator --view=pug 
npm i 
npm i axios --save 
- Executar a API temos de utilizar o comando:
npm start

Construir a Interface da seguinte forma:
1º Alterar a porta de entrada, para a porta pedida no enunciado(Ficheiro www da pasta bin)
2º Criar a pasta controllers ( Controllers contêm os controlos da bd feitos de forma "remota" utilizando o axios para fazer pedidos a API de dados que se encontra a funcionar noutra porta)
3º Criação do controller: Possui os controllers necessários para alterar os registos existentes na base de dados (Operações de CRUD) - Utiliza o AXIOS 
4º Criação de routes pedidas no enunciado para serem utilizadas pelo utilizador
5º Criação das views utilizando o w3.css e o pug


Para a rota localhost:15031/especies/:id eu utilizei a rota GET /plantas?especie=EEEE para ir buscar os registos que continham a especie EEEE, desta forma utilizei o axios get para query strings.






